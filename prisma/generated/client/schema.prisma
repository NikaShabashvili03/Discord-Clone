// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String? @unique
  email          String? @unique
  emailVerified  DateTime?
  image          String?
  cover          String?
  
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]

  pending Pending[]
  
  pendings Pending[] @relation("Pending")

  friend Friend[]
  
  friends Friend[] @relation("Friend")
}


model Conversation {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now())
  lastMessageAt     DateTime @default(now())
  name              String?
  isGroup           Boolean?

  messagesIds       String[] @db.ObjectId
  messages          Message[]

  userIds           String[] @db.ObjectId
  users             User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  body              String?
  image             String?
  createdAt         DateTime @default(now())

  seenIds String[] @db.ObjectId

  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}


model Pending {
  id                String @id @default(auto()) @map("_id") @db.ObjectId

  userId            String
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  fromId           String @db.ObjectId
  from             User @relation("Pending", fields: [fromId], references: [id], onDelete: Cascade)
}


model Friend { 
  id                String @id @default(auto()) @map("_id") @db.ObjectId

  userId            String
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  friendId           String @db.ObjectId
  friend             User @relation("Friend", fields: [friendId], references: [id], onDelete: Cascade)
}